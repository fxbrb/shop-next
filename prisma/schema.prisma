// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String    @id @default(cuid())
  firstname        String?
  lastname         String?
  email            String    @unique
  phone            String?   @unique
  birthday         DateTime?
  password         String?
  image            String?
  role             UserRole  @default(USER)
  emailVerified    DateTime?
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  products         Product[]
  sessions         Session[]
  reviews          Review[]
  orders           Order[]
  address          Address[]
}

model Address {
  id            String   @id @default(cuid())
  firstname     String?
  lastname      String?
  phone         String?
  address_line1 String
  address_line2 String?
  city          String
  postalCode    String
  country       String
  userId        String
  isDefault     Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String
  images      String[]
  price       Float       @default(0)
  discount    Float       @default(0)
  stock       Int         @default(0)
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  perfumes    String[]
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model Review {
  id        String   @id @default(cuid())
  message   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String
  image       String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  orderItems    OrderItem[]
  isPaid        Boolean     @default(false)
  name          String?
  total         Float
  phone         String      @default("")
  address_line1 String      @default("")
  address_line2 String      @default("")
  city          String      @default("")
  state         String      @default("")
  postalCode    String      @default("")
  country       String      @default("")
  receiptUrl    String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  quantity  Int
  perfume   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
